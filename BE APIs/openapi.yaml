openapi: 3.0.0
info:
  title: TeamTasker API
  description: API documentation for the TeamTasker application
  version: 1.0.0
servers:
  - url: http://localhost:3002/api
    description: Development server
paths:
  /auth/login:
    post:
      summary: Login user
      description: Authenticate user and return JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                rememberMe:
                  type: boolean
              required:
                - email
                - password
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/UserBasic'
        '401':
          description: Invalid credentials
  /auth/me:
    get:
      summary: Get current user
      description: Get the currently authenticated user
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
  /tasks:
    get:
      summary: Get tasks
      description: Get a list of tasks with optional filtering
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          description: Filter by task status
          schema:
            type: string
            enum: [todo, in-progress, completed]
        - name: priority
          in: query
          description: Filter by priority
          schema:
            type: string
            enum: [low, medium, high]
        - name: assigneeId
          in: query
          description: Filter by assignee ID
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Items per page
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
                  total:
                    type: integer
                  page:
                    type: integer
                  limit:
                    type: integer
                  totalPages:
                    type: integer
        '401':
          description: Unauthorized
    post:
      summary: Create task
      description: Create a new task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreate'
      responses:
        '201':
          description: Task created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized
        '400':
          description: Invalid input
  /tasks/{id}:
    get:
      summary: Get task
      description: Get a single task by ID
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Task ID
          schema:
            type: string
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found
        '401':
          description: Unauthorized
    patch:
      summary: Update task
      description: Update an existing task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Task ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
      responses:
        '200':
          description: Task updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found
        '401':
          description: Unauthorized
        '400':
          description: Invalid input
    delete:
      summary: Delete task
      description: Delete a task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Task ID
          schema:
            type: string
      responses:
        '204':
          description: Task deleted
        '404':
          description: Task not found
        '401':
          description: Unauthorized
  /users:
    get:
      summary: Get users
      description: Get a list of users
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: role
          in: query
          description: Filter by role
          schema:
            type: string
        - name: search
          in: query
          description: Search by name or email
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Items per page
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                  page:
                    type: integer
                  limit:
                    type: integer
                  totalPages:
                    type: integer
        '401':
          description: Unauthorized
  /profile:
    get:
      summary: Get profile
      description: Get current user profile
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
    patch:
      summary: Update profile
      description: Update current user profile
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
        '400':
          description: Invalid input
  /activities:
    get:
      summary: Get activities
      description: Get a list of activities
      tags:
        - Activities
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: query
          description: Filter by user ID
          schema:
            type: string
        - name: targetType
          in: query
          description: Filter by target type
          schema:
            type: string
        - name: targetId
          in: query
          description: Filter by target ID
          schema:
            type: string
        - name: action
          in: query
          description: Filter by action
          schema:
            type: string
            enum: [completed, commented, assigned, updated, created, deleted]
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Items per page
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of activities
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Activity'
                  total:
                    type: integer
                  page:
                    type: integer
                  limit:
                    type: integer
                  totalPages:
                    type: integer
        '401':
          description: Unauthorized
  /communication/announcements:
    get:
      summary: Get announcements
      description: Get a list of announcements
      tags:
        - Communication
      security:
        - bearerAuth: []
      parameters:
        - name: search
          in: query
          description: Search in title and content
          schema:
            type: string
        - name: isPinned
          in: query
          description: Filter by pinned status
          schema:
            type: boolean
        - name: authorId
          in: query
          description: Filter by author ID
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Items per page
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of announcements
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Announcement'
                  total:
                    type: integer
                  page:
                    type: integer
                  limit:
                    type: integer
                  totalPages:
                    type: integer
        '401':
          description: Unauthorized
    post:
      summary: Create announcement
      description: Create a new announcement
      tags:
        - Communication
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnouncementCreate'
      responses:
        '201':
          description: Announcement created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Announcement'
        '401':
          description: Unauthorized
        '400':
          description: Invalid input
  /development/goals:
    get:
      summary: Get development goals
      description: Get user development goals
      tags:
        - Development
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: query
          description: User ID (defaults to current user if not provided)
          schema:
            type: string
        - name: status
          in: query
          description: Filter by status
          schema:
            type: string
            enum: [not-started, in-progress, completed]
      responses:
        '200':
          description: List of development goals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DevelopmentGoal'
        '401':
          description: Unauthorized
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserBasic:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
        avatar:
          type: string
          nullable: true
        initials:
          type: string
    User:
      allOf:
        - $ref: '#/components/schemas/UserBasic'
        - type: object
          properties:
            department:
              type: string
              nullable: true
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
    UserProfile:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            bio:
              type: string
              nullable: true
            location:
              type: string
              nullable: true
            phone:
              type: string
              nullable: true
            skills:
              type: array
              items:
                $ref: '#/components/schemas/UserSkill'
    UserProfileUpdate:
      type: object
      properties:
        bio:
          type: string
        location:
          type: string
        phone:
          type: string
    Task:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [todo, in-progress, completed]
        priority:
          type: string
          enum: [low, medium, high]
        dueDate:
          type: string
          format: date
        progress:
          type: integer
          minimum: 0
          maximum: 100
        assigneeId:
          type: string
          nullable: true
        assignee:
          $ref: '#/components/schemas/UserBasic'
          nullable: true
        tags:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    TaskCreate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [todo, in-progress, completed]
          default: todo
        priority:
          type: string
          enum: [low, medium, high]
          default: medium
        dueDate:
          type: string
          format: date
        assigneeId:
          type: string
          nullable: true
        tags:
          type: array
          items:
            type: string
      required:
        - title
    TaskUpdate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [todo, in-progress, completed]
        priority:
          type: string
          enum: [low, medium, high]
        dueDate:
          type: string
          format: date
        progress:
          type: integer
          minimum: 0
          maximum: 100
        assigneeId:
          type: string
          nullable: true
        tags:
          type: array
          items:
            type: string
    Activity:
      type: object
      properties:
        id:
          type: string
        user:
          $ref: '#/components/schemas/UserBasic'
        action:
          type: string
          enum: [completed, commented, assigned, updated, created, deleted]
        target:
          type: string
        targetId:
          type: string
          nullable: true
        targetType:
          type: string
          nullable: true
        assigneeId:
          type: string
          nullable: true
        assignee:
          $ref: '#/components/schemas/UserBasic'
          nullable: true
        comment:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        timestamp:
          type: string
    Announcement:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string
        author:
          $ref: '#/components/schemas/UserBasic'
        date:
          type: string
          format: date-time
        isPinned:
          type: boolean
        likes:
          type: integer
        hasLiked:
          type: boolean
    AnnouncementCreate:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        isPinned:
          type: boolean
          default: false
      required:
        - title
        - content
    UserSkill:
      type: object
      properties:
        name:
          type: string
        level:
          type: integer
          minimum: 0
          maximum: 100
        yearsOfExperience:
          type: integer
    DevelopmentGoal:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        category:
          type: string
          enum: [technical, certification, leadership]
        status:
          type: string
          enum: [not-started, in-progress, completed]
        progress:
          type: integer
          minimum: 0
          maximum: 100
        dueDate:
          type: string
          format: date
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
